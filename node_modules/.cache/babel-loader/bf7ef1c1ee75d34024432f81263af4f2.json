{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\migue\\\\dev\\\\react\\\\sds\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\migue\\\\dev\\\\react\\\\sds\\\\src\\\\ui\\\\atoms\\\\fade-in-up-box\\\\index.jsx\";\nimport React, { useContext, useMemo, useState, useEffect } from \"react\";\nimport { IntersectionContext } from \"../intersection-observer\";\nimport { MotionBox } from \"../motion-box\";\nexport const FadeInUpBox = ({\n  children,\n  yOffset = 24,\n  // y initial possition\n  easing = [0.42, 0, 0.58, 1],\n  // [number, number, number, number] | \"linear\" | \"easeIn\" |\n  //  \"easeOut\" | \"easeInOut\" | \"circIn\" | \"circOut\" | \"circInOut\" | \"backIn\" | \"backOut\" |\n  // \"backInOut\" | \"anticipate\" | EasingFunction;\n  delayOrder // order of appearance\n\n}) => {\n  const _useContext = useContext(IntersectionContext),\n        inView = _useContext.inView;\n\n  const _useState = useState(0.25),\n        _useState2 = _slicedToArray(_useState, 2),\n        delay = _useState2[0],\n        setDelay = _useState2[1];\n\n  const offset = 0.4;\n  useEffect(() => {\n    if (delayOrder) return setDelay(delayOrder * offset);\n  }, [delayOrder, offset]);\n  const transition = useMemo(() => ({\n    duration: 0.4,\n    delay,\n    ease: easing\n  }), [delay, easing]);\n  const variants = {\n    hidden: {\n      y: yOffset,\n      opacity: 0,\n      transition\n    },\n    show: {\n      y: 0,\n      x: 0,\n      opacity: 1,\n      transition\n    }\n  };\n  return /*#__PURE__*/React.createElement(MotionBox, {\n    initial: \"hidden\",\n    animate: inView ? \"show\" : \"hidden\",\n    exit: \"hidden\",\n    variants: variants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, children, \" \", inView);\n};","map":{"version":3,"sources":["C:/Users/migue/dev/react/sds/src/ui/atoms/fade-in-up-box/index.jsx"],"names":["React","useContext","useMemo","useState","useEffect","IntersectionContext","MotionBox","FadeInUpBox","children","yOffset","easing","delayOrder","inView","delay","setDelay","offset","transition","duration","ease","variants","hidden","y","opacity","show","x"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,QAD0B;AAE1BC,EAAAA,OAAO,GAAG,EAFgB;AAEZ;AACdC,EAAAA,MAAM,GAAG,CAAC,IAAD,EAAO,CAAP,EAAU,IAAV,EAAgB,CAAhB,CAHiB;AAGG;AAC7B;AACA;AACAC,EAAAA,UAN0B,CAMf;;AANe,CAAD,KAOrB;AAAA,sBACeV,UAAU,CAACI,mBAAD,CADzB;AAAA,QACIO,MADJ,eACIA,MADJ;;AAAA,oBAEsBT,QAAQ,CAAC,IAAD,CAF9B;AAAA;AAAA,QAEGU,KAFH;AAAA,QAEUC,QAFV;;AAIJ,QAAMC,MAAM,GAAG,GAAf;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,UAAJ,EAAgB,OAAOG,QAAQ,CAACH,UAAU,GAAGI,MAAd,CAAf;AACjB,GAFQ,EAEN,CAACJ,UAAD,EAAaI,MAAb,CAFM,CAAT;AAIA,QAAMC,UAAU,GAAGd,OAAO,CACxB,OAAO;AACLe,IAAAA,QAAQ,EAAE,GADL;AAELJ,IAAAA,KAFK;AAGLK,IAAAA,IAAI,EAAER;AAHD,GAAP,CADwB,EAMxB,CAACG,KAAD,EAAQH,MAAR,CANwB,CAA1B;AASA,QAAMS,QAAQ,GAAG;AACfC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,CAAC,EAAEZ,OAAL;AAAca,MAAAA,OAAO,EAAE,CAAvB;AAA0BN,MAAAA;AAA1B,KADO;AAEfO,IAAAA,IAAI,EAAE;AACJF,MAAAA,CAAC,EAAE,CADC;AAEJG,MAAAA,CAAC,EAAE,CAFC;AAGJF,MAAAA,OAAO,EAAE,CAHL;AAIJN,MAAAA;AAJI;AAFS,GAAjB;AAUA,sBACE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAC,QADV;AAEE,IAAA,OAAO,EAAEJ,MAAM,GAAG,MAAH,GAAY,QAF7B;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,QAAQ,EAAEO,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGX,QANH,OAMcI,MANd,CADF;AAUD,CA9CM","sourcesContent":["import React, { useContext, useMemo, useState, useEffect } from \"react\";\r\n\r\nimport { IntersectionContext } from \"../intersection-observer\";\r\nimport { MotionBox } from \"../motion-box\";\r\n\r\nexport const FadeInUpBox = ({\r\n  children,\r\n  yOffset = 24, // y initial possition\r\n  easing = [0.42, 0, 0.58, 1], // [number, number, number, number] | \"linear\" | \"easeIn\" |\r\n  //  \"easeOut\" | \"easeInOut\" | \"circIn\" | \"circOut\" | \"circInOut\" | \"backIn\" | \"backOut\" |\r\n  // \"backInOut\" | \"anticipate\" | EasingFunction;\r\n  delayOrder // order of appearance\r\n}) => {\r\n  const { inView } = useContext(IntersectionContext);\r\n  const [delay, setDelay] = useState(0.25);\r\n\r\n  const offset = 0.4;\r\n\r\n  useEffect(() => {\r\n    if (delayOrder) return setDelay(delayOrder * offset);\r\n  }, [delayOrder, offset]);\r\n\r\n  const transition = useMemo(\r\n    () => ({\r\n      duration: 0.4,\r\n      delay,\r\n      ease: easing\r\n    }),\r\n    [delay, easing]\r\n  );\r\n\r\n  const variants = {\r\n    hidden: { y: yOffset, opacity: 0, transition },\r\n    show: {\r\n      y: 0,\r\n      x: 0,\r\n      opacity: 1,\r\n      transition\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MotionBox\r\n      initial=\"hidden\"\r\n      animate={inView ? \"show\" : \"hidden\"}\r\n      exit=\"hidden\"\r\n      variants={variants}\r\n    >\r\n      {children} {inView}\r\n    </MotionBox>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}